---
title: |
  Data Science for Electron Microscopy<br>
  Lecture 9: Imaging Inverse Problems 2
bibliography: ref.bib
csl: custom.csl
author:
  - name: Philipp Pelz
    affiliation: 
      - FAU Erlangen-Nürnberg
execute: 
  eval: true
  echo: true
format:
    revealjs: 
        code-copy: true
        # scroll-view:
        #     activate: true
        #     snap: mandatory
        #     layout: full
        width: 1920
        height: 1080
        menu:
            side: right  
            width: wide 
        template-partials:
            - title-slide.html
        css: custom.css  
        theme: custom.scss 
        slide-number: c/t    
        logo: "eclipse_logo_small.png"  
        highlight-style: a11y 
        incremental: false   
        background-transition: fade  
        footer: "©Philipp Pelz - FAU Erlangen-Nürnberg - Data Science for Electron Microscopy"
---     
## A Brief History of Resolution

![Resolution records in Electron Microscopy](ptycho_images/ptycho_01.png){height=600px}


## Ptychography in STEM

![[1]](ptycho_images/ptycho_02.png){height=900px}

::: aside
[1] @pelz2023
:::


## Steps to Solve Inverse Problems

### Step 1: Design Model + Optimization Problem

- **ePIE** [@maiden2009improved]:

$$
\arg \min_{P,O} \sum_p \left|\sqrt{I_p} - |F[P(\vec{r}-\vec{r_p}) \cdot O(\vec{r})]|\right|^2
$$

where:

::: {.columns}
:::: {.column width="50%"}
- $I_p$ is the measured diffraction pattern
- $P$ is the probe function 
- $O$ is the object function
::::
:::: {.column width="50%"}
- $\vec{r_p}$ is the probe position
- $F$ denotes Fourier transform
::::
:::

The forward model is:
$$
I_p = |F[P(\vec{r}-\vec{r_p}) \cdot O(\vec{r})]|^2
$$

 

## Step 2: Find Solution via Iterative Algorithms (Solvers)

- Design and implement iterative optimization algorithms
- Handle constraints and regularization
- Monitor convergence and solution quality
 
## Model Parameters in Ptychography

- Noise model (Gaussian vs. Poisson)
- Mixed-states ptychography [1]
    - $I(\vec{r_p}) = \sum_k |F[P_k(\vec{r}-\vec{r_p}) \cdot O(\vec{r})]|^2$
    - Fly-scan, partial coherence, beam vibration
- Scan position correction
- Orthogonal probe relaxation (OPR) [2]
    - $I(\vec{r_p}) = |F[P_{rp}(\vec{r}) \cdot O(\vec{r})]|^2$
    - Position error, probe variation

::: aside
[1] @pthouli2013, [2] @oestrus2016
:::

## Use all electrons: improved resolution and contrast

![](ptycho_images/ptycho_03.png){height=900px}

::: aside
slide credit: D. Muller, M&M PMC 2023
:::

## Dose vs. Resolution: 2 Regimes




::: {.columns}
:::: {.column width="50%"}
![[1]](ptycho_images/ptycho_04.png){height=700px}
::::

:::: {.column width="50%"}
### Low Dose Regime

- Poisson noise uncertainty >> probe size
- Resolution scales as $d \propto \frac{1}{\sqrt{N}}$
- Ptychography provides 2x information limit compared to ADF at same dose

### High Dose Regime  

- Probe size limited by diffraction
- ADF resolution saturates
- Ptychographic resolution continues improving with dose (2-3x better)
::::
:::



::: aside
[1] @chen2020, slide credit: D. Muller, M&M PMC 2023
:::

## Key parameters for experimental data: scan step size

![[1]](ptycho_images/01.webp){height=900px}

::: aside
[1] @skoupy2025 
:::

## Key parameters for experimental data: detector sampling

![[1]](ptycho_images/02.webp){height=900px}

::: aside
[1] @skoupy2025 
:::

## The Strong Phase Approximation (SPA)

The Strong Phase Approximation (SPA) models the interaction between the electron beam and specimen as a simple phase shift:

$$\psi(r) = \psi_0(r) e^{i\sigma V(r)}$$

where:

::: {.columns}
:::: {.column width="50%"}
- $\psi(r)$ is the exit wave
- $\psi_0(r)$ is the incident wave
::::

:::: {.column width="50%"}
- $\sigma$ is the interaction parameter (depends on beam energy)
- $V(r)$ is the specimen projected potential
::::
:::

Key assumptions:

- Probe shape remains unchanged: $|\psi(r)|^2 = |\psi_0(r)|^2$
- Neglects beam spreading and propagation effects
- Treats specimen potential as a pure phase object

::: {.callout-note}
## Limitations
The SPA breaks down for:

- Thick specimens (>10-20 nm)
- Low energy electrons (<60 keV)
- Strong scattering potentials
:::
 
## Multi-slice ptychography for thick samples

![[1]](ptycho_images/ptycho_06.png){height=600px}

- High resolution preserved up to at least 30 nm thick sample
- Phase change is linearly dependent on thickness

## Ambiguity in depth sectioning: The Missing Wedge

::: {.columns}
:::: {.column width="50%"}
- probe propagator in multi-slice ptychography has a characteristic form:

$$\mathbb{P}(\mathbf{k}, \Delta z) = \exp(-i\pi \lambda \Delta z|\mathbf{k}_r|^2)$$

- leads to lines of constant phase where:

$$\Delta z \propto \frac{1}{|\mathbf{k}_r|^2}$$

- This relationship creates an ambiguity in depth sectioning, known as the "missing wedge" problem.

- To address this, regularization is applied to the object layers using:

$$W(\mathbf{k}) = 1 - \arctan\left(\frac{\beta^2 k_z^2}{k_r^2}\right)/(\pi/2)$$


::::

:::: {.column width="50%"}


![[1]](ptycho_images/ptycho_07.png){height=400px}

where:

- $\beta$ is the weighting strength parameter
- $k_z$ is the wave vector component along the optical axis
- $k_r$ is the transverse wave vector magnitude

This regularization helps stabilize the reconstruction while preserving high-frequency information.
::::
:::

::: aside
[1] @chen2021, slide credit: D. Muller, M&M PMC 2023
:::

## Thermal Vibrations as a Resolution Limit: MS-Ptycho of PrScO3

![[1]](ptycho_images/ptycho_08.png){height=600px}

- Thermal vibrations limit resolution 
- Resolution limit of 22pm



::: aside
[1] @chen2021 
:::

## Implementing ptychography with gradient descent: the cropping operation

```{.python}
#| classes: "tall-cell"

import torch

def crop_windows(image, positions, window_size):
    """
    Crop windows from an image at specified positions using PyTorch.
    Windows are cropped starting from the top-left corner of the specified position.
    Positions wrap around image boundaries.
    
    Args:
        image (torch.Tensor): Input image tensor
        positions (torch.Tensor): Kx2 tensor of (x,y) positions
        window_size (int): Size of square window to crop
        
    Returns:
        torch.Tensor: Tensor of K cropped windows
    """
    # Initialize output tensor
    num_windows = positions.shape[0]
    windows = []
    h, w = image.shape
    
    # Crop window at each position
    for i, (x, y) in enumerate(positions):
        # Get wrapped indices
        x_indices = torch.arange(x, x + window_size) % w
        y_indices = torch.arange(y, y + window_size) % h
        
        # Create meshgrid of indices
        Y, X = torch.meshgrid(y_indices, x_indices, indexing='ij')
        
        # Index image with wrapped coordinates
        window = image[Y, X]
        windows.append(window)
        
    windows = torch.stack(windows, dim=0)
    return windows



```

 
## Implementing ptychography with gradient descent: the forward model

```{.python}
#| classes: "tall-cell"

def forward_model(probe, object_func, positions, window_size):
    """
    Implement the ptychographic forward model using PyTorch.
    
    Args:
        probe (torch.Tensor): Complex probe function
        object_func (torch.Tensor): Complex object function 
        positions (torch.Tensor): Kx2 tensor of (x,y) scan positions
        window_size (int): Size of square window to crop
        
    Returns:
        torch.Tensor: Stack of K diffraction patterns
    """
    # Crop object windows at scan positions
    object_windows = crop_windows(object_func, positions, window_size)
    
    # Multiply probe with object windows
    exit_waves = probe * object_windows
    
    # Take Fourier transform
    diffraction = torch.fft.fft2(exit_waves)
    
    # Calculate intensity (magnitude squared)
    intensity = torch.abs(diffraction) 
    
    return intensity
```

## Implementing ptychography with gradient descent: generating simulated data 1

```{.python}
#| fig-height: 4
#| fig-width: 10
#| code-fold: true
#| code-summary: "Show the code"

import numpy as np
import torch as th 
import skimage.data as skdata  
import skimage.transform as sktrans
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter
# Create defocused wave function
def defocused_wave(size=32):
 
    x = th.linspace(-1, 1, size)
    y = th.linspace(-1, 1, size)
    X, Y = th.meshgrid(x, y, indexing='ij')
    R = th.sqrt(X**2 + Y**2)
    
    # Phase function simulating defocus
    k = 8  # Wave number
    z = 0.1 # Defocus distance
    phase = k * (R**2)/(2*z)

    # Create circular amplitude mask
    center = size // 2
    Y, X = th.meshgrid(th.arange(size), th.arange(size))
    dist_from_center = th.sqrt((X - center)**2 + (Y - center)**2)
    radius = size // 4  # Adjust radius as needed
    amplitude_mask = (dist_from_center <= radius).float()
 
    # Complex wave function
    wave = amplitude_mask.to(th.float32) * th.exp(1j * phase)
    wave = th.fft.fftshift(wave)
    wave = th.fft.ifft2(wave)
    wave = th.fft.fftshift(wave)
    
    return wave
# Define PSNR function
def PSNR(img1, img2):
    """
    Calculate Peak Signal-to-Noise Ratio between two images
    
    Args:
        img1, img2: numpy arrays of same shape
        
    Returns:
        PSNR value in dB
    """
    mse = np.mean((img1 - img2) ** 2)
    if mse == 0:
        return float('inf')
    max_pixel = 1.0  # assuming normalized images [0,1]
    return 20 * np.log10(max_pixel / np.sqrt(mse))

# Define SSIM function
def SSIM(img1, img2):
    """
    Calculate Structural Similarity Index between two images
    
    Args:
        img1, img2: numpy arrays of same shape
        
    Returns:
        SSIM value between -1 and 1 (1 = identical images)
    """
    from skimage.metrics import structural_similarity as ssim
    return ssim(img1, img2, data_range=1.0)


img = skdata.astronaut()

img = sktrans.resize(img, (64, 64))
img = gaussian_filter(img, sigma=1)
# Convert to grayscale by taking mean across color channels
img = np.mean(img, axis=2)
img = img.astype(np.float32) / 255.0
img = th.from_numpy(img)  
```

## Implementing ptychography with gradient descent: generating simulated data 2

```{.python}


# Generate and display the wave function
wave = defocused_wave(size=64)
wave = wave / th.norm(wave)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
ax1.imshow(th.abs(wave), cmap='gray')
ax1.set_title('Amplitude')
ax1.axis('off')
# Plot phase
ax2.imshow(th.angle(wave), cmap='hsv')
ax2.set_title('Phase')
ax2.axis('off')
plt.tight_layout()
plt.show()

```

## Implementing ptychography with gradient descent: generating simulated data 3

```{.python}
# Create 2D grid of positions with step size 4
x = th.arange(-16, 64-16, 4)
y = th.arange(-16, 64-16, 4) 
    
X, Y = th.meshgrid(x, y, indexing='ij')
positions = th.stack([X.flatten(), Y.flatten()], dim=1)

# Plot image with scan positions overlaid
plt.figure(figsize=(6,6))
plt.imshow(img.numpy(), cmap='gray')
plt.scatter(positions[:,0], positions[:,1], c='red', alpha=0.5, s=20)
plt.title('Scan positions overlaid on image')
plt.axis('off')
plt.show()



```

## Implementing ptychography with gradient descent: generating simulated data 4

```{.python}
complex_image = torch.polar(th.ones_like(img), img/img.max()*0.4)
measured_amplitude = forward_model(wave, complex_image, positions, wave.shape[0]) + 1e-10

# Plot intensities as a mosaic
n = int(np.sqrt(len(positions)))  # Grid size
from torchvision.utils import make_grid

# Reshape and normalize the measured amplitudes for visualization
grid_images = torch.fft.fftshift(measured_amplitude[:n*n])  # Take only complete grid
grid_images = grid_images / grid_images.max()  # Normalize to [0,1]

# Create image grid
grid = make_grid(grid_images.unsqueeze(1), nrow=n, padding=2, normalize=False)
# Permute dimensions to get correct shape (H,W,C)
grid = grid.permute(1, 2, 0)

# Display the grid
plt.figure(figsize=(12, 12))
plt.imshow(grid.squeeze().numpy(), cmap='gray')
plt.title('Intensity patterns at each scan position')
plt.axis('off')
plt.show()
```

## Implementing ptychography with gradient descent: solving the inverse problem

```{.python}
#| code-fold: true
#| code-summary: "Show the code"

# Initialize random guess for object
guess = th.polar(th.ones_like(img), th.randn_like(img)*1e-8)
guess.requires_grad = True
# Optimization parameters
num_epochs = 20
batch_size = len(positions) // 2
learning_rate = 3e-2
optimizer = th.optim.Adam([guess], lr=learning_rate)
print(len(positions))
# Training loop
for epoch in range(num_epochs):
    # Randomly select batch_size positions
    batch_indices = th.randperm(len(positions))

    losses = 0

    # Process batch_size positions at a time
    for i in range(0, len(positions), batch_size):
        # print(batch_indices[i:i+batch_size])
        batch_pos = positions[batch_indices[i:i+batch_size]]  # Get batch of positions
        batch_amp = measured_amplitude[batch_indices[i:i+batch_size]]  # Get corresponding intensities
        
        # Forward pass for this position
        pred_amp = forward_model(wave, guess, batch_pos, wave.shape[0])
        
        # Calculate loss for this position
        loss = torch.nn.functional.mse_loss(pred_amp, batch_amp)

        losses += loss.item()
        
        # Backward pass
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    
    # Print progress every 10 epochs
    if (epoch + 1) % 1 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {losses:.4f}')

# Plot results
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))

gt_phase = th.angle(complex_image)
gt_phase -= gt_phase.min()

res_phase = th.angle(guess).detach().numpy()
res_phase -= res_phase.min()

# Plot original phase
ax1.imshow(gt_phase, cmap='gray', vmax=gt_phase.max(), vmin=gt_phase.min())
ax1.set_title('Original Phase')
ax1.axis('off')

# Plot reconstructed phase
ax2.imshow(res_phase, cmap='gray', vmax=gt_phase.max(), vmin=gt_phase.min())
ax2.set_title('Reconstructed Phase')
ax2.axis('off')

# Plot absolute error
error = th.abs(th.angle(guess).detach() - th.angle(complex_image))
ax3.imshow(error.numpy(), cmap='hot')
ax3.set_title('Absolute Error')
ax3.axis('off')

plt.tight_layout()
plt.show()
 

```

## Ptychographic Tomography Solves Nanostructures

![](./images/image66.jpg){width="65%"}
![](./extracted_media/image67.png){width="65%"}

::: {.callout-note}
First 3D atomic structure solved with phase-contrast tomography.<br>
Novel ZrTe<sub>2</sub> phase, confirmed stable with DFT simulations.
:::

::: aside 
@Pelz_2023
:::

## Depth Resolution Progress Over Time

::: {.columns}
::: {.column width="50%"}
![2022: 2.2 Å in 9nm thick volume using SSPT](./images/image30.jpg){style="width:700px;"}
:::

::: {.column width="50%"}
![2023: 2.0 Å in 18nm thick volume using MSPT](./images/image30.jpg){style="width:700px;"}
:::
:::
![2024: 0.8 Å in 11nm thick volume using E2E-MSPT](./images/image30.jpg){style="width:700px; display: block; margin: 0 auto;"}

::: aside
@Pelz_2023, @Romanov_2024, @You_Romanov_Pelz_2024
:::

## Multi-Slice Ptychographic Tomography   

::: {.columns}
::: {.column width="50%"}
![Perform MSP reconstruction <br>for each tilt angle<br>and project the potential along z
<br><br><br><br><br><br><br><br> ✅ Advantages:<br>
- Decouple tomographic alignment from ptychographic reconstruction<br>
- Can use positions and alignment as input to E2E-MSPT
](./extracted_media/image74.png){width="80%"}
:::

::: {.column width="50%"}
![Multi-slice Ptychographic Tomography forward model<br>
<br>❌ Disadvantage:<br>
- Loses some 3D info from MSP
](./extracted_media/image75.png){width="80%"}
:::
:::

<img src="./extracted_media/image73.png" style="position: absolute; top: 0; right: -150px; width: 150px; z-index: 10;">
<img src="./extracted_media/image69.png" style="position: absolute; top: 200px; right: -150px; width: 150px; z-index: 10;">

::: aside
@Romanov_2024
:::

## Joint Tomography and Rigid Alignment enables atomic resolution of beyond-DOF volumes

![](./extracted_media/image75.png){width="35%"}
 
::: {.callout-note}
Enabled by reaching sub-pixel alignment at each scale
:::


::: aside
@Romanov_2024
:::



## 3x DOF volumes display atomic resolution

::: {.columns}
::: {.column width="50%"}
![](./extracted_media/image77.gif)
:::

::: {.column width="50%"}
![](./extracted_media/media21.mp4){controls="true" autoplay="true" loop="true" width="100%"}
:::
:::

::: {.callout-note}
Volume size: (18.2 nm)<sup>3</sup>
Voxel size: 0.3 Å
:::

::: aside
@Romanov_2024
:::

## Orthoslices reveal lattice in all 3 dimensions

![scale: 1 nm](./extracted_media/image80.png)

::: {.callout-note}
Lattice resolved, but Co atom contrast overpower O contrast<br>
=> Around 1 Å z resolution required to resolve O atoms
:::

::: aside
@Romanov_2024
:::

## End-to-end reconstruction - putting all pieces together

::: {.columns}
::: {.column width="50%"}
Fully E2E-MSPT reconstruction includes

1. affine resampling of potential volume<br>
2. z-resampling of potential volume (save compute)<br>
3. batch-croppping and mixed-state multi-slice model<br>
4. far-field propagation<br>
5. gradient backpropagation through full model 
:::

::: {.column width="50%"}
![](./extracted_media/image88.png){width="70%"}
:::
:::

::: {.callout-note}
The most accurate approximation for 4D-STEM tomography to-date 
::: 

::: aside
@You_Romanov_Pelz_2024
:::

<img src="./extracted_media/image169.png" style="position: absolute; top: 0px; right: -150px; width: 150px; z-index: 10;">

## Successive approximations help initialize "nuisance parameters"


![](./extracted_media/image89.png){width="90%"}



::: {.callout-note} 
Successive initialization reduces compute<br> overhead
of the most accurate models
::: 

::: aside
@You_Romanov_Pelz_2024
:::

## Limited-Angle Tomography is an option now

::: {.columns}
::: {.column width="30%"}
![](./extracted_media/image129.png){height=700px}
:::
::: {.column width="70%"}
![](./extracted_media/image127.png){height=800px}
:::
:::

::: {.callout-note} 
Light and heavy atoms recovered in 3D with 90-degree tilt range. 
::: 

::: aside
@You_Romanov_Pelz_2024
:::

## Sub-Ångstrom alignment accuracy demonstrated in simulations
::: {.columns}
::: {.column width="33%"}
![Frozen phonon 4D-STEM simulation<br>Al<sub>2</sub>O<sub>3</sub> nanoparticle](./extracted_media/image126.png){width="50%"}
:::
::: {.column width="33%"}

![Phase projections at different tilt angles](./extracted_media/image124.png){width="100%"}
:::
::: {.column width="33%"}
![](./extracted_media/image125.png){width="75%"}
![](./extracted_media/image123.png){width="75%"}
<figcaption>Alignment accuracy</figcaption>
:::
:::


::: {.callout-note} 
Mean alignment error < voxel size (0.4 Å)
::: 
::: aside
@You_Romanov_Pelz_2024
:::
## Volume displays clear atomic contrast in 3D

::: {.columns}
::: {.column width="50%"}
![](./extracted_media/media23.mp4){width="85%" controls="true" autoplay="true" loop="true"}
 
:::
::: {.column width="50%"}
![](./extracted_media/TePowerSpectrum2.mp4){width="85%" controls="true" autoplay="true" loop="true"}
:::
:::

::: {.callout-note} 
Recovery of missing wedge with only physical priors.<br>
Reached Nyquist resolution of 0.82 Å
::: 
::: aside
@You_Romanov_Pelz_2024
:::
## Volume displays clear atomic contrast in 3D
::: {.columns}
::: {.column width="50%"  style="text-align: left;"}
![](./extracted_media/media24.mp4){width="100%" controls="true" autoplay="true" loop="true"}<br>
2 
:::
::: {.column width="50%" style="text-align: right;"}
![](./extracted_media/media25.mp4){width="100%" controls="true" autoplay="true" loop="true" style="margin-left: auto; margin-right: 0; display: block;"}<br>
1
:::
:::

![](./extracted_media/image134.png){width="75%" style="position: absolute; top: 470px; left: 650px;"}

::: {.callout-note} 
All directions recovered well
::: 
 
## Dose reduction by sub-sampling
::: {.columns}
::: {.column width="50%"}
![](./extracted_media/circles.png){width="82%"}
:::
::: {.column width="50%"}
![](./extracted_media/image135.png){width="100%"}
:::
:::

::: {.callout-note} 
2.8 Å resolution with 2.2*10<sup>4</sup> e<sup>-</sup>/Å<sup>2</sup> - virtual sub-sampling<br>
0.82 Å resolution with 12x sub-sampling<br>

::: 

::: aside
@You_Romanov_Pelz_2024
:::
     
   
  
## Wiring up your microscope for automated 4D-STEM tomography

![](./extracted_media/image136.png){height=800px}

::: {.callout-note} 
SerialEM plugins allow custom detectors and online image processing 
:::  

::: aside 
Also with SerialEM plugin: Seifer, Shahar et al. (2024), doi:10.1093/mam/ozae050
:::
 
## Adopting the cryo-EM playbook: PACE-Tomo SOTA
::: {.columns}
::: {.column width="25%"}
![](./extracted_media/image137.png){width="100%"}
Tracking taret on tilt-axis
Imaging target off tilt-axis
:::
::: {.column width="25%"}
![](./extracted_media/image138.png){width="100%"}
Geometric sample model that tracks shifts in 3D
:::
::: {.column width="25%"}
![](./extracted_media/image140.png){width="100%"}
Multi-target acquisition
:::
::: {.column width="25%"}
![](./extracted_media/image139.png){width="100%"}
+- 50nm tracking errors
:::
:::

::: {.callout-note} 
Cryo-EM automation tools have nearly all desired features<br>
but lack tracking precision and can be enhanced by real-time 4D-STEM
::: 

::: aside
Eisenstein, Fabian et al. (2023), doi:10.1038/s41592-022-01690-1
:::

## Automated 4D-STEM tomography: first target
::: {.columns}
::: {.column width="50%"}
Sample synthesized by Xingchen Ye Group: <br>Gd<sub>2</sub>O<sub>3</sub> nanohelices
:::
::: {.column width="50%"}
![](./extracted_images/page_002_img_001.png){width="70%"}
:::
:::

 
::: aside 
Liu, Yang et al. (2020), doi:10.1021/jacs.0c05175
:::
 

## Automated 4D-STEM tomography at atomic resolution

::: {.columns}
::: {.column width="33%"}
![](./extracted_media/image141.gif){width="100%" loop="true" autoplay="true"}
:::
::: {.column width="66%"}
![](./extracted_media/image21.gif){width="100%" loop="true" autoplay="true"}
:::
 
:::
::: {.columns}
::: {.column width="50%"}
- Timing: 2 min. per tilt, 90 min. per tilt series<br>
- No human intervention required after target selection
:::
::: {.column width="50%"}
Bla
:::
 
:::



::: {.callout-note} 
Cryo-EM automation tools can be adapted and enhanced for automated atomic resolution 4D-STEM tomography
::: 
::: aside
You, Pelz et al. in preparation
:::
 

 






## References   
::: {#refs}
:::
 






































<script>
document.getElementById("marimo-frame").onload = function() {
    try {
        let iframeDoc = document.getElementById("marimo-frame").contentWindow.document;
        let marimoBadge = iframeDoc.querySelector("div.fixed.bottom-0.right-0.z-50");
        if (marimoBadge) {
            marimoBadge.style.display = "none";
            console.log("Marimo badge hidden successfully.");
        } else {
            console.log("Badge not found.");
        }
    } catch (error) {
        console.warn("Unable to modify iframe content due to CORS restrictions.");
    }
};
</script>
</div>