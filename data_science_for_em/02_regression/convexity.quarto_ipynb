{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<!-- ---\n",
        "title: \"Convexity\"\n",
        "format: \n",
        "  revealjs:\n",
        "    theme: custom.scss\n",
        "    css: custom.css\n",
        "    width: 1920\n",
        "    height: 1080\n",
        "    menu:\n",
        "      side: right\n",
        "      width: wide\n",
        "    template-partials:\n",
        "      - title-slide.html\n",
        "    slide-number: c/t\n",
        "    logo: \"eclipse_logo_small.png\"\n",
        "    highlight-style: a11y\n",
        "    incremental: false\n",
        "    background-transition: fade\n",
        "    footer: \"©Philipp Pelz - FAU Erlangen-Nürnberg - Data Science for Electron Microscopy\"\n",
        "execute:\n",
        "  eval: true\n",
        "  echo: true\n",
        "--- -->\n",
        "\n",
        "# Convexity\n",
        "\n",
        "- Convexity is crucial for optimization algorithm design\n",
        "- Benefits:\n",
        "  - Easier algorithm analysis and testing\n",
        "  - Better understanding of deep learning optimization\n",
        "  - Properties near local minima often resemble convex functions\n",
        "- Even nonconvex problems can benefit from convex analysis"
      ],
      "id": "2ee6f322"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: setup1\n",
        "#| code-fold: true\n",
        "%matplotlib inline\n",
        "import d2l\n",
        "import numpy as np\n",
        "from mpl_toolkits import mplot3d\n",
        "import torch"
      ],
      "id": "setup1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Definitions\n",
        "\n",
        "### Convex Sets\n",
        "\n",
        "- A set $\\mathcal{X}$ is convex if:\n",
        "  - For any $a, b \\in \\mathcal{X}$\n",
        "  - Line segment connecting $a$ and $b$ is in $\\mathcal{X}$\n",
        "- Mathematical definition:\n",
        "  $$\\lambda a + (1-\\lambda) b \\in \\mathcal{X} \\textrm{ whenever } a, b \\in \\mathcal{X}$$\n",
        "  for all $\\lambda \\in [0, 1]$\n",
        "\n",
        "### Visual Examples\n",
        "\n",
        "![The first set is nonconvex and the other two are convex.](./img/pacman.svg)\n",
        "\n",
        "--- \n",
        "\n",
        "### Set Operations\n",
        "\n",
        "- Intersections of convex sets are convex\n",
        "- Unions of convex sets need not be convex\n",
        "- Example: $\\mathbb{R}^d$ is convex\n",
        "- Bounded sets (e.g., balls) are often convex\n",
        "\n",
        "![The intersection between two convex sets is convex.](./img/convex-intersect.svg)\n",
        "\n",
        "![The union of two convex sets need not be convex.](./img/nonconvex.svg)\n",
        "\n",
        "## Convex Functions\n",
        "\n",
        "### Definition\n",
        "\n",
        "- Function $f: \\mathcal{X} \\to \\mathbb{R}$ is convex if:\n",
        "  - For all $x, x' \\in \\mathcal{X}$\n",
        "  - For all $\\lambda \\in [0, 1]$\n",
        "  - Satisfies: $\\lambda f(x) + (1-\\lambda) f(x') \\geq f(\\lambda x + (1-\\lambda) x')$\n",
        "\n",
        "### Examples\n"
      ],
      "id": "4da54f98"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: function-examples\n",
        "#| code-fold: true\n",
        "f = lambda x: 0.5 * x**2  # Convex\n",
        "g = lambda x: d2l.cos(np.pi * x)  # Nonconvex\n",
        "h = lambda x: d2l.exp(0.5 * x)  # Convex\n",
        "\n",
        "x, segment = d2l.arange(-2, 2, 0.01), d2l.tensor([-1.5, 1])\n",
        "d2l.use_svg_display()\n",
        "_, axes = d2l.plt.subplots(1, 3, figsize=(9, 3))\n",
        "for ax, func in zip(axes, [f, g, h]):\n",
        "    d2l.plot([x, segment], [func(x), func(segment)], axes=ax)"
      ],
      "id": "function-examples",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Jensen's Inequality\n",
        "\n",
        "### Definition\n",
        "\n",
        "- Generalization of convexity\n",
        "- For convex function $f$:\n",
        "  $$\\sum_i \\alpha_i f(x_i) \\geq f\\left(\\sum_i \\alpha_i x_i\\right)$$\n",
        "  $$E_X[f(X)] \\geq f\\left(E_X[X]\\right)$$\n",
        "- Where $\\alpha_i \\geq 0$ and $\\sum_i \\alpha_i = 1$\n",
        "\n",
        "### Applications\n",
        "\n",
        "- Bounding complex expressions\n",
        "- Log-likelihood of partially observed variables\n",
        "- Variational methods\n",
        "- Clustering algorithms\n",
        "\n",
        "## Properties\n",
        "\n",
        "### Local vs Global Minima\n",
        "\n",
        "- Local minima of convex functions are global minima\n",
        "- Proof by contradiction\n",
        "- Example: $f(x) = (x-1)^2$\n"
      ],
      "id": "bf1cf2b5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: local-global-minima\n",
        "#| code-fold: true\n",
        "f = lambda x: (x - 1) ** 2\n",
        "d2l.set_figsize((8,8))\n",
        "d2l.plot([x, segment], [f(x), f(segment)], 'x', 'f(x)')"
      ],
      "id": "local-global-minima",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "--- \n",
        "\n",
        "### Below Sets\n",
        "\n",
        "- Given convex function $f$ on convex set $\\mathcal{X}$\n",
        "- Below set $\\mathcal{S}_b = \\{x | x \\in \\mathcal{X} \\textrm{ and } f(x) \\leq b\\}$ is convex\n",
        "- Proof uses definition of convexity\n",
        "\n",
        "### Second Derivatives\n",
        "\n",
        "- For twice-differentiable $f: \\mathbb{R}^n \\rightarrow \\mathbb{R}$\n",
        "- Convex if and only if Hessian is positive semidefinite\n",
        "- One-dimensional case: $f'' \\geq 0$\n",
        "- Multidimensional case: $\\nabla^2f \\succeq 0$\n",
        "\n",
        "## Constraints\n",
        "\n",
        "### Constrained Optimization\n",
        "\n",
        "- Form: \n",
        "  $$\\begin{aligned} \\mathop{\\textrm{minimize~}}_{\\mathbf{x}} & f(\\mathbf{x}) \\\\\n",
        "    \\textrm{ subject to } & c_i(\\mathbf{x}) \\leq 0 \\textrm{ for all } i \\in \\{1, \\ldots, n\\}\\end{aligned}$$\n",
        "- Examples:\n",
        "  - Unit ball constraint: $c_1(\\mathbf{x}) = \\|\\mathbf{x}\\|_2 - 1$\n",
        "  - Half-space constraint: $c_2(\\mathbf{x}) = \\mathbf{v}^\\top \\mathbf{x} + b$\n",
        "\n",
        "### Lagrangian\n",
        "\n",
        "- Combines objective and constraints\n",
        "- Form: $L(\\mathbf{x}, \\alpha_1, \\ldots, \\alpha_n) = f(\\mathbf{x}) + \\sum_{i=1}^n \\alpha_i c_i(\\mathbf{x})$\n",
        "- Lagrange multipliers $\\alpha_i \\geq 0$\n",
        "- Saddle point optimization\n",
        "\n",
        "---\n",
        "\n",
        "### Penalties\n",
        "\n",
        "- Alternative to exact constraint satisfaction\n",
        "- Add $\\alpha_i c_i(\\mathbf{x})$ to objective\n",
        "- Example: weight decay\n",
        "- More robust than exact satisfaction\n",
        "- Works well for nonconvex problems\n",
        "\n",
        "---\n",
        "\n",
        "### Projections\n",
        "\n",
        "- Projection on convex set $\\mathcal{X}$:\n",
        "  $$\\textrm{Proj}_\\mathcal{X}(\\mathbf{x}) = \\mathop{\\mathrm{argmin}}_{\\mathbf{x}' \\in \\mathcal{X}} \\|\\mathbf{x} - \\mathbf{x}'\\|$$\n",
        "- Example: gradient clipping\n",
        "- Applications:\n",
        "  - Sparse weight vectors\n",
        "  - $\\ell_1$ ball projections\n",
        "\n",
        "![Convex Projections.](./img/projections.svg)\n",
        "\n",
        "## Summary\n",
        "\n",
        "- Key properties:\n",
        "  - Intersections of convex sets are convex\n",
        "  - Jensen's inequality for expectations\n",
        "  - Hessian positive semidefinite for convex functions\n",
        "  - Local minima are global minima\n",
        "- Constraint handling:\n",
        "  - Lagrangian approach\n",
        "  - Penalty methods\n",
        "  - Projections\n",
        "- Applications in deep learning:\n",
        "  - Algorithm motivation\n",
        "  - Understanding optimization\n",
        "  - Gradient descent analysis\n"
      ],
      "id": "a196ab33"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/usr/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}